h1
  | ほぼ素のRailsアプリだった「スピカとチロル」が本番環境で安定動作するまで

section
  p
    | この記事は　
    a[href="https://adventar.org/calendars/6566"]
      | Akatsuki Advent Calendar
    | 　6日目の記事です。
  p 
    | 前日は
    a[href="https://zenn.dev/e_koma/articles/20211205-gcp-instances-recommender"]
      | 使用頻度の低いGCEインスタンスを組織一括で検知する方法
    | でした。

  p
    span
      | ただ rails new しただけのアプリケーションである
    a[href="https://st.jyllsarta.net/"]
      | スピカとチロル
    span
      | が、本番環境での安定動作が実現するまでにやったことをまとめました。

section
  h2
    | もくじ
  ul.with_point
    li
      a[href="#pre"]
        | 前提
    li 
      a[href="#st"]
        | スピカとチロルの紹介
    li 
      a[href="#architecture"]
        | おおまかアーキテクチャ解説
    li 
      a[href="#stats"]
        | このゲームのインフラ的特徴
    li 
      a[href="#timeline"]
        | 本番リリースからのタイムライン
    li 
      a[href="#kpt"]
        | ふりかえり
    li 
      a[href="#end"]
        | おわりに

section
  h2#pre
    | 前提
  p 
    | スケーラブルで堅牢なシステムを完成させたキラキラした話ではなく、小規模でサイズも大きくないサーバを無駄なく使えるようにするまでの話になります。
      こんな方々におすすめです。
  ul.with_point
    li 
      | ハッカソンや個人制作で動くWebアプリケーションを作ったことがあるものの、それを本番で動くシステムとして動作させた経験のない人
    li 
      | スピカとチロルリリース初期に行っていたインフラ対応の裏側を知りたい人
    li 
      a[href="https://ja.mackerel.io/"]
        | Mackerel 
      | のメトリクスの読み方に興味がある人(今回とても助けられました)

section
  h2#st
    | スピカとチロルの紹介
  p 
    a[href="https://st.jyllsarta.net/"]
      | https://st.jyllsarta.net/
  p
    | サーバ処理主体の半放置ゲームです。自動探索で拾ったアイテムを装備して、手動のRPG的なバトルでさらなる奥地をひたすら目指すタイプのゲームです。
      考えると倒せるようになるボス戦、手をかけたらそれだけ探索効率の良さとしてフィードバックが返ってくる楽しさがウリです。
  .screenshots
    a[href="/images/stray_release/screenshot_1.jpeg"]
      img.screenshot.with_shadow(src="/images/stray_release/screenshot_1.jpeg")
    a[href="/images/stray_release/screenshot_2.jpeg"]
      img.screenshot.with_shadow(src="/images/stray_release/screenshot_2.jpeg")
    a[href="/images/stray_release/screenshot_3.jpeg"]
      img.screenshot.with_shadow(src="/images/stray_release/screenshot_3.jpeg")
    a[href="/images/stray_release/screenshot_4.jpeg"]
      img.screenshot.with_shadow(src="/images/stray_release/screenshot_4.jpeg")
section
  h2#architecture
    | おおまかアーキテクチャ解説
  p 
    | シンプルに1台のEC2の中で全部受け切る前提にしておいて、受けきれなくなってから最悪スケールも可能アーキテクチャです。
      ユーザの進捗データはキャッシュサーバ・DBのみに保存されているので、これらをインスタンス内から切り離して参照先を切り替えればアプリケーションサーバの数を増やせる作りです。
      (結果的にそれが必要になる規模での大きな負荷は来ませんでしたが、予想外の大盛況に耐えられる構造というのは大いに開発の励みになりました)
  .img_with_caption
    a[href="/images/stray_release/infra.png"]
      img.image[src="/images/stray_release/infra.png"]
    .caption
      | もはや 図にするまでもありませんが構成図です

section
  h2#stats
    | このゲームのインフラ的特徴
  h5 
    | お金が絡まないので、必要なサービスレベルの水準は低い。
  p
    | サーバが落ちたらゲームの評判が落ちて悔しいが、意地の領域。
  h5 
    | 個人の財布で活動しているので、サーバのリソースを可能な限り小さく保ちたい。
  p
    | AWSのサービスを広範囲で使うほどに予算を食うので、1台のEC2サーバに押し込みたくなる。
  h5 
    | 半放置ゲームなのでつけっぱなしにするプレイスタイルが多い。
  p
    | 30秒に1回サーバに進捗を問い合わせており、通信の大部分はこれ。アクティブユーザの数に対してほぼ線形に負荷が上昇する。
  h5 
    | ゲームロジック・APIレスポンスタイムには特段の問題がないことを検証済み。
  p
    | 身内向けのアルファ版を本番リリース3ヶ月前に本番とほぼ同様の構成で公開しており、その時はユーザ10人ほどを t3a.micro インスタンスで捌いた。

section
  h2#timeline
    | 本番リリースからのタイムライン
  p 
    | いろいろな問題にぶつかりながら、なんとか本番のサーバが安定動作するまでの記録です。
  h4
    | 2021/5/8 リリース
  p 
    | twitter でリリース告知を行いました。
      静かなスタートを切ることができ、リツイート100件分からの流入で200人ほどが同時に遊ぶ状態になりましたが、特段の問題なく捌き切ることができました。
      この時点ではプレイヤー数は累計で1000人程度です。
  .img_with_caption
    a[href="/images/stray_release/monitor11.png"]
      img.image[src="/images/stray_release/monitor11.png"]
    .caption
      | 主な流入経路はRTとユーザの攻略口コミです

  h4
    | 2021/6/26 13:17 ブログ経由での急な大量流入
  p 
    | リリース後しばらく落ち着いていましたが、
    a[href="http://blog.livedoor.jp/lkrejg/archives/66159915.html"]
      | Flashゲーを紹介する大手ブログ 
    | で紹介されてアクセス急増。
      Mackerelからの ロードアベレージ・CPU利用率のアラートで気づきました。
      とりあえず本番環境に自分でもアクセスし、ゲームが動作していることを確認。
  .align_horizontal
    .img_with_caption
      a[href="/images/stray_release/monitor1.png"]
        img.image[src="/images/stray_release/monitor1.png"]
      .caption
        | ロードアベレージは1を超えた
    .img_with_caption
      a[href="/images/stray_release/monitor2.png"]
        img.image[src="/images/stray_release/monitor2.png"]
      .caption
        | CPUは1コアを使い切りそうなペースに

  h4
    | 2021/6/26 22:40 ディスク使用率アラート
  p 
    | 毎日行っているログローテーションによる圧縮が来る前にディスクが埋まりかけてアラートが発生しました。
      そもそもディスク容量が16GBとかなり小さめだったので、
    a[href="https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/requesting-ebs-volume-modifications.html"]
      | EBSを無停止で拡張
    | して対応。
  p 
    | サービスを停止せずにディスク容量を増やせるのはとてもありがたいですね。自宅サーバだとこうはいかないので、AWSの強みを活かせました。
  .img_with_caption
    a[href="/images/stray_release/monitor5.png"]
      img.image[src="/images/stray_release/monitor5.png"]
    .caption
      | ストレージアラート

  h4
    | 2021/6/27 02:46 CPUクレジット切れ
  p 
    | 急にゲームが重くなったとの報告が入り、Mackerelを確認したところウェイトが増えていました。CPUクレジット切れですね。
      t系インスタンスだったのであたり前で、事前にこういう事が起きるのは気付いていたことでしたが、EBSの方を対応してアラートが消えたので満足してしまっていました。本当にまずい障害を起こすときはこういう不注意がトリガーになりますね...
  p 
    | 今後のアクセスの傾向が読めないこともあり、安全をとって c5.large インスタンスに変更しました。
      このタイミングで、累計プレイヤー数が2000人を突破しています。半日で累計プレイヤー数が倍になりました。
  .align_horizontal
    .img_with_caption
      a[href="/images/stray_release/monitor7.png"]
        img.image[src="/images/stray_release/monitor7.png"]
      .caption
        | あきらかにCPUが使えなくなっている
    .img_with_caption
      a[href="/images/stray_release/monitor8.png"]
        img.image[src="/images/stray_release/monitor8.png"]
      .caption
        | 不適切なユーザへの障害報告

  h4
    | 2021/6/27 10:00 レイテンシー悪化 / マルチプロセスに変更
  p
    | 昨晩インスタンスのスケールアップをしたにもかかわらず、ロードアベレージは数時間で同水準まで上昇してしまいました。
      ブログやtwitterでもまた重くなったとの報告が上がり始めます。
      Mackerelの指標を見る限りCPU利用率100% ( 2コアなので 200%が最大 ) 付近で上限に達しており、インスタンスの性能を使いきれていないように見えます。
      インスタンスにSSHで入り、top を確認するとCPU利用率100%でひとりで頑張っているrubyのプロセスを発見しました。1プロセスで捌き切れる限度まで達していたようです。
      調べてみたところ、
    a[href="https://qiita.com/snaka/items/029889198def72e84209"]
      | Rails標準の Puma の設定では、1プロセスで動作
    | するようになっていました。
    a[href="https://github.com/puma/puma/blob/master/docs/deployment.md"]
      | puma のデプロイに関する資料
    | を参考にしつつ、pumaも2プロセスで動作させるようにしたところ、体感の遊び心地は大幅に改善して意図通りのゲーム体験が戻ってきました。      

  h4
    | 2021/6/28 10:00 夜を乗り切った
  p
    | ゲームの遊び心地が改善した状態で一晩の山を耐え切り、無事安定動作させることができました。
      その後数日すこしずつ負荷が伸び、最大CPU利用率140%程度まで逼迫しましたがこの構成で耐えきることができました。
      無事ブログ経由の流入層みんなにゲームを遊んでもらうことに成功しました。
  .align_horizontal
    .img_with_caption
      a[href="/images/stray_release/monitor9.png"]
        img.image[src="/images/stray_release/monitor9.png"]
      .caption
        | ロードアベレージ。ユーザの生活リズムと連動しています
    .img_with_caption
      a[href="/images/stray_release/monitor10.png"]
        img.image[src="/images/stray_release/monitor10.png"]
      .caption
        | CPU利用率。深夜に小さく跳ねているのはログローテーション
      
  h4
    | いま
  p
    | 8000人ほどのアカウントがあり、1500人にラスボスを倒してもらえました。予想以上の大繁盛です。作った甲斐がありました。

section
  h2#kpt
    | ふりかえり
  p 
    | アクセス急増に際して発生した3つの障害対応のふりかえりです。
  h4 
    | よかったこと
  h5 
    | 事前に監視体制は敷けていた
  p 
    | Mackerel の標準メトリクスだけとはいえ、メトリクス取得・監視体制ができていたので迅速な対応ができました。
      サーバの体感が重かったのは累計3時間程度、サーバ停止も累計15分程度に抑えられ、ゲーム体験を提供するという観点ではほぼ成功といえる結果になりました。
  h5 
    | 大量流入前にゲームロジックの方の検証ができていた 
  p 
    | 身内でのアルファ版公開と本公開後の1ヶ月半のゆるいアクセス時期にゲームロジック側の検証が丁寧にできており、本流入がやってきたタイミングではインフラの拡張の方に専念することができました。
      今回の対応は「計算資源を使い切る」ことだけにフォーカスできていましたが、この対応をしつつバグ修正やバランス調整、APIのレスポンス速度改善に気を回すことになっていたら大変でした。
  h4 
    | よりよくできたこと
  h5 
    | t系インスタンスを本番で使うのをやめよう
  p 
    a[href="https://aws.amazon.com/jp/blogs/startup/burstable-performance-instances/"]
      | そもそもAWSは、t系インスタンスを本番稼働させるのを推奨していません。
  p 
    | ほんの少し割安なのと、いつも使っているからという理由で本番でもt系インスタンスを利用していました。
      CPUクレジットの上限的に、いざアクセスがやってきて8~12時間程度がタイムリミットになる爆弾を抱えることになります。
  h5 
    | 可能であればやっぱり負荷試験をしよう
  p 
    | 今回起きた3つの障害であるディスクアラート、t系インスタンスのCPUクレジット制限、CPU1コア以上使えない状態はすべて事前に負荷試験をしておけば発見できるものでした。
  p 
    a[href="https://locust.io/"]
      | Locust 
    | などコード管理できる便利な負荷試験のための道具は揃っているので、主要なAPIを一通り叩くシナリオを作成して本番環境がどの程度までアクセスをさばくことができるのか把握できていると良かったですね。
      今回はゲームが完成した瞬間にさっそく世に出してしまいました。

section
  h2#end
    | おわりに
  p 
    | 作っていた時の想定の数倍のアクセスがやってきて、ゲーム開発者としてとても嬉しい体験ができました。
      自分の作ったゲームにまさか
    a[href="http://blog.livedoor.jp/lkrejg/archives/66159915.html"]
      | 300件近いコメント
    | を貰って、
    a[href="https://wikiwiki.jp/flyatama/%E3%82%B9%E3%83%94%E3%82%AB%E3%81%A8%E3%83%81%E3%83%AD%E3%83%AB%28%E3%81%B5%E3%81%9F%E3%82%8A%E3%81%A7%E3%83%80%E3%83%B3%E3%82%B8%E3%83%A7%E3%83%B3%E6%8E%A2%E7%B4%A2%E6%94%BE%E7%BD%AE%E3%82%B2%E3%83%BC%E3%83%A0%29"] 
      | 攻略wikiが作られる
    | なんて思っていませんでした。遊んでいただきまして感謝です。

a.twitter[href="https://twitter.com/share?ref_src=twsrc%5Etfw" class="twitter-share-button" data-show-count="false"]
  Tweet
script[async src="https://platform.twitter.com/widgets.js" charset="utf-8"]

p 
  |