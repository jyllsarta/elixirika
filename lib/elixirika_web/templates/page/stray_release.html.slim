h1
  | ほぼ素のRailsアプリだった「スピカとチロル」が本番環境で安定動作するまで

section
  p
    | この記事は
    a[href="https://adventar.org/calendars/6566"]
      | Akatsuki Advent Calendar
    | 6日目の記事です。
  // TODO: 前日誰だったかかく
  p
    span
      | ただ `rails new` しただけのアプリケーションである
    a[href="https://st.jyllsarta.net/"]
      | スピカとチロル
    span
      | のアルファ版公開 ~ 本番環境での安定動作が実現するまでにやったことをまとめてみました。

section
  h2
    | もくじ
  // TODO: それぞれのセクションにid振っちゃってリンクにする
  ul.with_point
    li
      | 前提とあらすじ
    li 
      | スピカとチロルの紹介
    li 
      | おおまかアーキテクチャ解説
    li 
      | このゲーム特有の処理
    li 
      | 本番リリース！からのタイムライン
    li 
      | おわりに

section
  h2
    | 前提
  p 
    | スケーラブルで堅牢なシステムを完成させたキラキラした話ではなく、小規模でサイズも大きくないサーバを無駄なく使えるようにするまでの話になります。このお話を読んでもらいたい人はこんな方たちです
  ul.with_point
    li 
      | ハッカソンや個人制作で動くWebアプリケーションを作ったことがあるものの、それを本番で動くシステムとして動作させた経験のない人
    li 
      | スピカとチロルリリース初期に行っていたインフラ対応の裏側を知りたい人
    li 
      a[href="https://ja.mackerel.io/"]
        | Mackerel 
      | のメトリクスの読み方に興味がある人(今回とても助けられました)

section
  h2
    | スピカとチロルの紹介
  p 
    a[href="https://st.jyllsarta.net/"]
      | https://st.jyllsarta.net/
  p
    | サーバ処理主体の半放置ゲームです。自動探索で拾ったアイテムを装備して、手動のRPG的なバトルでさらなる奥地をひたすら目指すタイプのゲームです。
      考えると倒せるようになるボス戦、手をかけたらそれだけ探索効率の良さとしてフィードバックが返ってくる楽しみがウリです。
  .screenshots
    img.screenshot(src="/images/stray_release/screenshot_1.jpeg")
    img.screenshot(src="/images/stray_release/screenshot_2.jpeg")
    img.screenshot(src="/images/stray_release/screenshot_3.jpeg")
    img.screenshot(src="/images/stray_release/screenshot_4.jpeg")
section
  h2
    | おおまかアーキテクチャ解説
  p 
    | シンプルに1台のEC2の中で全部受け切る前提にしておいて、受けきれなくなってから最悪スケールも可能アーキテクチャです。
      ユーザの進捗データはキャッシュサーバ・DBのみに保存されているので、これらを切り離して参照先を切り替えればアプリケーションサーバの数を増やせる作りです。
      (結果的にそれが必要になる規模での大きな負荷は来ませんでしたが、予想外の大盛況に耐えられる構造というのは大いに開発の励みになりました)
  img.middle_picture[src="/images/stray_release/infra.png"]

section
  h2
    | このゲームのインフラ的特徴
  p 
    | 
  ul.with_point
    li
      | お金が絡まないので、必要なサービスレベルの水準は低い。
      ul
        li
          | サーバが落ちたらゲームの評判が落ちて悔しいが、意地の領域。
    li 
      | 個人の財布で活動しているので、サーバのリソースを可能な限り小さく保ちたい。
      ul
        li
          | AWSのサービスを広範囲で使うほどに予算を食うので、1台のEC2サーバに押し込みたくなる
    li 
      | 半放置ゲームなのでつけっぱなしにするプレイスタイルが多い。
      ul
        li
          | 30秒に1回サーバに進捗を問い合わせており、通信の大部分はこれ。アクティブユーザの数に対してほぼ線形に負荷が上昇する
    li 
      | ゲームロジック・APIレスポンスタイムには特段の問題がないことを検証済み。
      ul
        li
          | 身内向けのアルファ版を本番リリース3ヶ月前に本番とほぼ同様の構成で公開しており、その時はユーザ10人ほどを t3a.micro インスタンスで乗り切った。
            (とはいえ、10人ではDBの負荷検証は全くできてないですね)

section
  h2
    | 本番リリース！ ...からのタイムライン
  p 
    | 本編です。リリースからあった出来事のまとめです。

  h4
    | 2021/5/8 リリース
  p 
    //TODO: 充実させる / スクリーンショットを貼る
    | twitter でリリース告知を行いました。静かなスタートを切ることができ、事前告知から興味のあった層 + リツイート100件分から流入した層で100 ~ 200人が同時に遊ぶ状態になりましたが、特段の問題なく捌き切ることができました。

  h4
    | 2021/6/26 13:17 ブログ経由での急な大量流入
  p 
    | ブログで紹介されてアクセス急増。ロードアベレージ・CPU利用率のアラートで気づく
      とりあえず本番環境に自分でもアクセスし、ゲームが動作していることを確認。
      https://twitter.com/jyll/status/1408641171442655235

  h4
    | 2021/6/26 22:40 ディスク使用率アラート
  p 
    | 毎日行っているのログローテーションによる圧縮が来る前にディスクが埋まりかけてアラート
      そもそもディスク容量が16GBとかなり小さめだったので、EBSを無停止で48GBまで拡張して対応
      https://twitter.com/jyll/status/1408782199407538178

  h4
    | 2021/6/27 02:46 CPUクレジット切れ
  p 
    | t系インスタンスだったので当然だったが、Mackerelでは見ていない領域+EBSの方を対応して満足してしまった。
      このタイミングから目に見えてゲームの動作が遅くなり、体験が非常に悪くなる
      今後のアクセスが読めないこともあり、安全をとって `c5.large` インスタンスに変更。
      このタイミングで、累計プレイヤー数が2000人を突破。
      https://twitter.com/jyll/status/1408844073935392768

  h4
    | 2021/6/27 10:00 レイテンシー悪化 / マルチプロセスに変更
  p
    | https://twitter.com/jyll/status/1409148695480733697
      昨晩インスタンスのスケールアップをしたにもかかわらず、ロードアベレージは数時間で昨晩の水準まで上昇してしまう。ブログのコメントでもまだ重いとの報告が続く。
      Mackerelの指標を見る限りCPU利用率100%付近で上限に達しており、インスタンスの性能を使いきれていないように見える。
      インスタンスにSSHで入り、top を確認するとCPU利用率100%で頑張っているrubyのプロセスを発見。1プロセスで捌き切れる限度まで達していたようです。
      Rails標準の Puma の設定では、1プロセスで全てを捌き切るようになっていたようです。
      c5.large の vCPU は 2なのでそれに合わせてpumaも2プロセスで動作させるようにしたところ、体感の遊び心地は大幅に改善して意図通りのゲーム体験が戻ってきました。
      参考: 
      https://qiita.com/snaka/items/029889198def72e84209
      https://github.com/puma/puma/blob/master/docs/deployment.md
      プロセス数を増やしたにもかかわらずCPU利用率がそこまで伸びきらなかったのは、Pumaの1プロセスでの並列性の方に限界が来ていて、CPUの方は少し余裕があったのだろうかと推測しております。

  h4
    | 2021/6/28 10:00 夜を乗り切った
  p
    | ゲームの遊び心地が改善した状態で一晩の山を耐え切り、無事安定動作させることができました。
      その後数日様子を見ておりましたがアラートが出ることはなく、無事ブログ経由の流入層みんなにゲームを遊んでもらうことに成功しました。
      https://twitter.com/jyll/status/1409308803049218048

  h4
    | いま
  p
    | 8000人弱のアカウントがあり、1500人にラスボスを倒してもらえました。予想以上の大繁盛です。作った甲斐がありました。

section
  h2
    | おわりに
  p 
    | 
  h4 
    | よかったこと
  h4 
    | よりよくできたこと

