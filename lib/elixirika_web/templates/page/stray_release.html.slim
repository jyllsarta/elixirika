h1
  | ほぼ素のRailsアプリだった「スピカとチロル」が本番環境で安定動作するまで

section
  p
    span
      | ただ `rails new` しただけのアプリケーションである
    a[href="https://st.jyllsarta.net/"]
      | スピカとチロル
    span
      | のアルファ版公開 ~ 本番環境での安定動作が実現するまでにやったことをまとめてみました。

section
  h2
    | もくじ
  ul.with_point
    li
      | 前提とあらすじ
    li 
      | スピカとチロルの特徴
    li 
      | おおまかアーキテクチャ解説
    li 
      | このゲーム特有の処理
    li 
      | 本番リリース！
    li 
      | t系インスタンスなのでCPUクレジットを食べ切りました
    li 
      | 「インスタンスを大きくしてCPU利用率が50%に下がったのにまだゲームが重い」
    li 
      | 終わりに

section
  h2
    | 前提
  p 
    | スケーラブルで堅牢なシステムを完成させたキラキラした話ではなく、小規模でサイズも大きくないサーバを無駄なく使えるようにするまでの話になります。このお話を読んでもらいたい人はこんな方たちです
  ul.with_point
    li 
      | ハッカソンや個人制作で動くWebアプリケーションを作ったことがあるものの、それを本番で動くシステムとして動作させた経験のない人
    li 
      | 「スピカとチロル」リリース初期に行っていたインフラ対応の裏側を知りたい人
    li 
      | Mackerel のメトリクスの読み方に興味がある人(今回とても助けられました)

section
  h2
    | おおまかアーキテクチャ解説
  p 
    | すごく単純に1台のEC2の中で全部受け切る前提にしておいて、受けきれなくなってからスケールも可能アーキテクチャです。
      ユーザの進捗データはキャッシュサーバ・DBのみに保存されているので、これらの参照先を切り替えればアプリケーションサーバの数を増やせる作りです。(結果的に それが必要になるほどの負荷は来ませんでしたが)
  p 
    | TODO: 図を作って挿入する

section
  h2
    | このゲームのインフラ的特徴
  p 
    | 
  ul.with_point
    li 
      | お金が絡まないので、求められるサービスレベルの水準は高くない。サーバが落ちたとして、ゲームの評判が落ちる以上のダメージはない
    li 
      | 同様にお金を稼がない完全趣味活動なので、サーバのリソースを可能な限り小さく保ちたい。AWSの機能を広範囲で使うほどに予算を食うので、1台のEC2サーバに押し込む戦略が有効
    li 
      | 半放置ゲームなのでつけっぱなしにするプレイスタイルが多い。30秒に1回サーバに進捗を問い合わせるので、アクティブユーザの数に対してほぼ線形に負荷が上昇する
    li 
      | 身内向けのアルファ版を本番リリース3ヶ月前に本番とほぼ同様の構成で公開しており、その時はユーザ10人ほどを t3a.micro インスタンスで乗り切った。
        このときに Rails / DBのロジックには特段のボトルネックはなく、どのAPIも妥当な時間でレスポンスを返せていることを確認済み

section
  h2
    | 本番リリース！
  p 
    | TODO: 書く

section
  h2
    | t系インスタンスなのでCPUクレジットを食べ切りました
  p 
    | TODO: 書く

section
  h2
    | 「インスタンスを大きくしてCPU利用率が50%に下がったのにまだゲームが重い」
  p 
    | TODO: 書く
